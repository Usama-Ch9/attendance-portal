name: Build & Run Locally (Self-hosted)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-run:
    runs-on: self-hosted
    env:
      VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
      BACKEND_IMAGE: backend:latest
      FRONTEND_IMAGE: frontend:latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Docker on runner
        run: |
          set -euo pipefail

          echo ">>> Installing Docker..."

          # Remove older versions if any
          sudo apt-get remove -y docker docker-engine docker.io containerd runc || true

          sudo apt-get update
          sudo apt-get install -y ca-certificates curl gnupg lsb-release

          # Add Docker's official GPG key
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
          sudo chmod a+r /etc/apt/keyrings/docker.asc

          # Add repository
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

          sudo apt-get update

          # Install Docker + Compose plugin
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

          # Ensure docker group exists and add runner user to it
          sudo groupadd docker || true
          sudo usermod -aG docker $USER || true

          # Restart docker service
          sudo systemctl enable docker
          sudo systemctl restart docker

          # Verify installation
          docker --version
          docker compose version

      - name: Ensure jq is available
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            echo ">>> Installing jq..."
            sudo apt-get update && sudo apt-get install -y jq
          fi
          jq --version

      - name: Build backend image
        run: docker build -t $BACKEND_IMAGE ./backend

      - name: Build frontend image
        run: docker build -t $FRONTEND_IMAGE ./frontend

      - name: Fetch secrets from Vault and write env file
        id: fetch-vault
        run: |
          set -euo pipefail

          resp=$(curl -sS --fail \
            --header "X-Vault-Token: ${VAULT_TOKEN}" \
            "${VAULT_ADDR}/v1/secret/data/myapp/config")

          PORT=$(echo "$resp" | jq -r '.data.data.PORT')
          MONGODB_URI=$(echo "$resp" | jq -r '.data.data.MONGODB_URI')
          JWT_SECRET=$(echo "$resp" | jq -r '.data.data.JWT_SECRET')

          cat > .env.runtime <<EOF
PORT=${PORT}
MONGODB_URI=${MONGODB_URI}
JWT_SECRET=${JWT_SECRET}
EOF

          echo "PORT=${PORT}" >> $GITHUB_ENV
          echo "MONGODB_URI=${MONGODB_URI}" >> $GITHUB_ENV
          echo "JWT_SECRET=${JWT_SECRET}" >> $GITHUB_ENV

      - name: Stop previous containers
        run: |
          docker rm -f backend || true
          docker rm -f frontend || true

      - name: Run backend container
        run: |
          docker run -d \
            --name backend \
            -p 5001:5001 \
            --env-file .env.runtime \
            ${{ env.BACKEND_IMAGE }}

      - name: Run frontend container
        run: |
          docker run -d \
            --name frontend \
            -p 3000:80 \
            ${{ env.FRONTEND_IMAGE }}
